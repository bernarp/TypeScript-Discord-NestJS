/**
 * @file InteractionLoggerUpdateMessageUser.ts
 * @description –°–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –µ–≥–æ.
 * –í–ï–†–°–ò–Ø 2.0: –ù–∞—Å–ª–µ–¥—É–µ—Ç AbstractMessageLogger.
 */
import { Injectable } from "@nestjs/common";
import { OnEvent } from "@nestjs/event-emitter";
import { Message, PartialMessage, EmbedBuilder } from "discord.js";
import { AppEvents } from "@/event.EventBus/app.events";
import { MessageUpdateEvent } from "@/event.EventBus/message-update.event";
import { IInteractionLoggerChannel } from "../abstractions/IInteractionLoggerChannel";

@Injectable()
export class InteractionLoggerUpdateMessageUser extends IInteractionLoggerChannel {
    /**
     * @method onMessageUpdated
     * @description –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
     * @param {MessageUpdateEvent} payload - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.
     */
    @OnEvent(AppEvents.MESSAGE_UPDATED)
    public async onMessageUpdated(payload: MessageUpdateEvent): Promise<void> {
        const { oldMessage, newMessage } = payload;

        if (oldMessage.content === newMessage.content) return;

        if (!this._isLoggable(newMessage)) {
            return;
        }

        const logChannelId = await this._guildConfig.get(
            newMessage.guildId!,
            "logChannelMessageEditId"
        );
        if (!logChannelId) {
            return;
        }

        const logEmbed = await this._createLogEmbed(oldMessage, newMessage);
        await this._sendLog(logChannelId, newMessage.guildId!, logEmbed);
    }

    /**
     * @private
     * @method _createLogEmbed
     * @description –°–æ–∑–¥–∞–µ—Ç –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (embed) –¥–ª—è –ª–æ–≥–∞.
     * @param {Message | PartialMessage} oldMessage - –°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
     * @param {Message | PartialMessage} newMessage - –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
     * @returns {Promise<EmbedBuilder>} –ì–æ—Ç–æ–≤—ã–π embed.
     */
    private async _createLogEmbed(
        oldMessage: Message | PartialMessage,
        newMessage: Message | PartialMessage
    ): Promise<EmbedBuilder> {
        const author = newMessage.author!.partial
            ? await newMessage.author!.fetch()
            : newMessage.author!;

        const oldContent =
            oldMessage.content?.substring(0, 1000) || "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.";
        const newContent =
            newMessage.content?.substring(0, 1000) || "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.";

        return this._embedFactory.createInfoEmbed({
            title: "–õ–æ–≥: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
            description: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **${author.tag}** –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.`,
            fields: [
                {
                    name: "üë§ –ê–≤—Ç–æ—Ä",
                    value: `**Tag:** ${author.tag}\n**ID:** \`${author.id}\``,
                    inline: true,
                },
                {
                    name: "üìç –ö–∞–Ω–∞–ª",
                    value: newMessage.channel.toString(),
                    inline: true,
                },
                {
                    name: "üìú –°—Ç–∞—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ",
                    value: `\`\`\`${oldContent}\`\`\``,
                    inline: false,
                },
                {
                    name: "üìù –ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ",
                    value: `\`\`\`${newContent}\`\`\``,
                    inline: false,
                },
            ],
            context: { user: author, guild: newMessage.guild! },
        });
    }
}
