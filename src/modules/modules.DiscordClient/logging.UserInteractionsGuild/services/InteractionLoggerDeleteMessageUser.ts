/**
 * @file InteractionLoggerDeleteMessageUser.ts
 * @description –°–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –µ–≥–æ.
 * @version 4.1: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –∞—É–¥–∏—Ç-–ª–æ–≥–∞.
 */
import { Inject, Injectable, Logger } from "@nestjs/common";
import { OnEvent } from "@nestjs/event-emitter";
import { IEmbedFactory } from "@interface/utils/IEmbedFactory";
import { IClient } from "@interface/IClient";
import { IGuildConfig } from "@interface/IGuildConfig";
import {
    TextChannel,
    AuditLogEvent,
    User,
    Message,
    PartialMessage,
    EmbedBuilder,
} from "discord.js";
import { Service } from "@core/abstractions/Service";
import { AppEvents } from "@/event.EventBus/app.events";
import { MessageDeleteEvent } from "@/event.EventBus/message-delete.event";

@Injectable()
export class InteractionLoggerDeleteMessageUser extends Service {
    private readonly _logger = new Logger(
        InteractionLoggerDeleteMessageUser.name
    );

    constructor(
        @Inject("IEmbedFactory") private readonly _embedFactory: IEmbedFactory,
        @Inject("IClient") private readonly _client: IClient,
        @Inject("IGuildConfig") private readonly _guildConfig: IGuildConfig
    ) {
        super();
    }

    /**
     * @method onMessageDeleted
     * @description –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
     * @param {MessageDeleteEvent} payload - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.
     */
    @OnEvent(AppEvents.MESSAGE_DELETED)
    public async onMessageDeleted(payload: MessageDeleteEvent): Promise<void> {
        const { deletedMessage } = payload;

        if (!this._isLoggable(deletedMessage)) {
            return;
        }

        const logChannelId = await this._guildConfig.get(
            deletedMessage.guildId,
            "logChannelMessageDeleteId"
        );
        if (!logChannelId) {
            return;
        }

        const { author, executor } = await this._fetchAuthorAndExecutor(
            deletedMessage
        );
        // –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ.
        if (!author || !executor) {
            return;
        }

        const logEmbed = this._createLogEmbed(deletedMessage, author, executor);
        await this._sendLog(logChannelId, deletedMessage.guildId, logEmbed);
    }

    /**
     * @private
     * @method _isLoggable
     * @description –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ª–µ–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é (–Ω–µ –±–æ—Ç, –µ—Å—Ç—å –∞–≤—Ç–æ—Ä –∏ —Å–µ—Ä–≤–µ—Ä).
     * @param {Message | PartialMessage} message - –£–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
     * @returns {boolean} True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å.
     */
    private _isLoggable(message: Message | PartialMessage): boolean {
        return !!(
            message.guild &&
            message.guildId &&
            message.author &&
            !message.author.bot
        );
    }

    /**
     * @private
     * @method _fetchAuthorAndExecutor
     * @description –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã User –¥–ª—è –∞–≤—Ç–æ—Ä–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
     * @param {Message | PartialMessage} message - –£–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
     * @returns {Promise<{author: User | null; executor: User | null}>} –û–±—ä–µ–∫—Ç —Å –∞–≤—Ç–æ—Ä–æ–º –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.
     */
    private async _fetchAuthorAndExecutor(
        message: Message | PartialMessage
    ): Promise<{ author: User | null; executor: User | null }> {
        let author: User | null = null;
        if (message.author) {
            author = message.author.partial
                ? await message.author.fetch()
                : message.author;
        }
        if (!author) return { author: null, executor: null };
        let executor: User | null = author;
        if (message.guild) {
            try {
                const auditLogs = await message.guild.fetchAuditLogs({
                    type: AuditLogEvent.MessageDelete,
                    limit: 5,
                });

                const deleteLog = auditLogs.entries.find(
                    (log) =>
                        log.target.id === author?.id &&
                        Date.now() - log.createdTimestamp < 5000 
                );
                if (deleteLog?.executor) {
                    executor = await this._client.users.fetch(
                        deleteLog.executor.id
                    );
                }
            } catch (error) {
                this._logger.warn(
                    `Could not fetch audit logs for guild ${message.guildId}:`,
                    error
                );
            }
        }

        return { author, executor };
    }

    /**
     * @private
     * @method _createLogEmbed
     * @description –°–æ–∑–¥–∞–µ—Ç –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (embed) –¥–ª—è –ª–æ–≥–∞.
     * @param {Message | PartialMessage} message - –£–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
     * @param {User} author - –ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è.
     * @param {User} executor - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É–¥–∞–ª–∏–≤—à–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ.
     * @returns {EmbedBuilder} –ì–æ—Ç–æ–≤—ã–π embed.
     */
    private _createLogEmbed(
        message: Message | PartialMessage,
        author: User,
        executor: User
    ): EmbedBuilder {
        const content =
            message.content?.substring(0, 1000) ||
            "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (embed –∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).";

        return this._embedFactory.createErrorEmbed({
            title: "–õ–æ–≥: –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
            description: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **${author.tag}** –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.`,
            fields: [
                {
                    name: "üë§ –ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è",
                    value: `**Tag:** ${author.tag}\n**ID:** \`${author.id}\``,
                    inline: true,
                },
                {
                    name: "üî• –ö–µ–º —É–¥–∞–ª–µ–Ω–æ",
                    value: `**Tag:** ${executor.tag}\n**ID:** \`${executor.id}\``,
                    inline: true,
                },
                {
                    name: "üìç –ö–∞–Ω–∞–ª",
                    value: message.channel.toString(),
                    inline: false,
                },
                {
                    name: "üìú –°–æ–¥–µ—Ä–∂–∏–º–æ–µ",
                    value: `\`\`\`${content}\`\`\``,
                    inline: false,
                },
            ],
            context: { user: author, guild: message.guild! },
        });
    }

    /**
     * @private
     * @method _sendLog
     * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç embed –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤.
     * @param {string} channelId - ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤.
     * @param {string} guildId - ID —Å–µ—Ä–≤–µ—Ä–∞.
     * @param {EmbedBuilder} embed - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
     */
    private async _sendLog(
        channelId: string,
        guildId: string,
        embed: EmbedBuilder
    ): Promise<void> {
        try {
            const logChannel = await this._client.channels.fetch(channelId);
            if (logChannel instanceof TextChannel) {
                await logChannel.send({ embeds: [embed] });
            } else {
                this._logger.warn(
                    `Channel ${channelId} is not a text channel for guild ${guildId}.`
                );
            }
        } catch (error) {
            this._logger.error(
                `Failed to send log message to channel ${channelId} for guild ${guildId}:`,
                error
            );
        }
    }
}
