/**
 * @file InteractionLoggerService.ts
 * @description –°–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Ö.
 * –í–ï–†–°–ò–Ø 3.0: –ù–∞—Å–ª–µ–¥—É–µ—Ç –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å Service.
 */
import { Inject, Injectable, Logger } from "@nestjs/common";
import { OnEvent } from "@nestjs/event-emitter";
import { InteractionCreateEvent } from "@event.EventBus/interaction-create.event";
import { IEmbedFactory } from "@interface/utils/IEmbedFactory";
import { IClient } from "@interface/IClient";
import { IConfig } from "@interface/IConfig";
import { TextChannel, ChannelType } from "discord.js";
import { Service } from "@core/abstractions/Service";
import { AppEvents } from "@/event.EventBus/app.events";

@Injectable()
export class InteractionLoggerCommandService extends Service {
    private readonly _logger = new Logger(InteractionLoggerCommandService.name);

    /**
     * @constructor
     */
    constructor(
        @Inject("IEmbedFactory") private readonly _embedFactory: IEmbedFactory,
        @Inject("IClient") private readonly _client: IClient,
        @Inject("IConfig") private readonly _config: IConfig
    ) {
        super();
    }

    /**
     * @method onInteractionCreated
     * @description –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏–µ 'interaction.created'.
     * @param {InteractionCreateEvent} payload - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.
     */
    @OnEvent(AppEvents.INTERACTION_CREATED_COMMAND)
    async onInteractionCreated(payload: InteractionCreateEvent): Promise<void> {
        const { interaction } = payload;
        const { user, channel, commandName, guild, commandId, channelId } =
            interaction;

        const logContext = {
            command: {
                name: `/${commandName}`,
                id: commandId,
            },
            user: {
                tag: user.tag,
                id: user.id,
            },
            source: {
                type: interaction.inGuild() ? "Guild" : "DM",
                guild: interaction.inGuild()
                    ? { name: guild?.name, id: guild?.id }
                    : undefined,
                channel: {
                    type: ChannelType[channel?.type ?? 0],
                    id: channelId,
                },
            },
        };

        this._logger.log(`Command executed`, logContext);

        const logEmbed = this._embedFactory.createInfoEmbed({
            title: "–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã",
            description: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **${user.tag}** –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É **/${commandName}**.`,
            fields: [
                {
                    name: "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                    value: `**Tag:** ${user.tag}\n**ID:** \`${user.id}\``,
                    inline: true,
                },
                {
                    name: "üìç –ú–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞",
                    value: interaction.inGuild()
                        ? `**–°–µ—Ä–≤–µ—Ä:** ${
                              guild?.name
                          }\n**–ö–∞–Ω–∞–ª:** ${channel?.toString()}`
                        : "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                    inline: true,
                },
                {
                    name: "üîß –î–µ—Ç–∞–ª–∏ –∫–æ–º–∞–Ω–¥—ã",
                    value: `**ID –ö–æ–º–∞–Ω–¥—ã:** \`${commandId}\`\n**ID –ö–∞–Ω–∞–ª–∞:** \`${channelId}\``,
                    inline: false,
                },
            ],
            context: { user, guild },
        });

        const logChannelId = this._config.get<string>("LOG_CHANNEL_ID");
        if (!logChannelId) {
            this._logger.warn(
                "LOG_CHANNEL_ID is not set. Skipping log message to Discord."
            );
            return;
        }

        try {
            const logChannel = await this._client.channels.fetch(logChannelId);
            if (logChannel instanceof TextChannel) {
                await logChannel.send({ embeds: [logEmbed] });
            } else {
                this._logger.warn(
                    `Channel ${logChannelId} is not a valid text channel.`
                );
            }
        } catch (error) {
            this._logger.error(
                `Failed to send log message to channel ${logChannelId}:`,
                error
            );
        }
    }

    // TODO: –ï—Å–ª–∏ —ç—Ç–æ–º—É —Å–µ—Ä–≤–∏—Å—É –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–∞–∫–∞—è-–ª–∏–±–æ –ª–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    // (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ –ª–æ–≥–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ),
    // –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ init.
    /*
    public override init(): void {
        this._logger.log("Initializing InteractionLoggerService...");
        // –∫–∞–∫–∞—è-—Ç–æ –ª–æ–≥–∏–∫–∞...
    }
    */
}
