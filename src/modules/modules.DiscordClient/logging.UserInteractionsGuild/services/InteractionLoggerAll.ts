/**
 * @file InteractionLoggerAll.ts
 * @description –°–µ—Ä–≤–∏—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π Discord.
 */

import { Injectable } from "@nestjs/common";
import { OnEvent } from "@nestjs/event-emitter";
import { EmbedBuilder, BaseInteraction, InteractionType } from "discord.js";
import { InteractionCreateEvent } from "@event.EventBus/interaction-create.event";
import { AppEvents } from "@/event.EventBus/app.events";
import { BaseInteractionLogger } from "../abstractions/classesAbstract/BaseInteractionLogger.abstract";
import { LogChannelType } from "../abstractions/LogChannelType.enum";

@Injectable()
export class InteractionLoggerAll extends BaseInteractionLogger {
    @OnEvent(AppEvents.INTERACTION_CREATED)
    public async onInteractionCreated(
        payload: InteractionCreateEvent
    ): Promise<void> {
        const { interaction } = payload;

        if (!this.isInteractionLoggable(interaction)) {
            return;
        }

        const logChannelId = await this.getLogChannelId(
            interaction.guildId!,
            LogChannelType.INTERACTION
        );

        if (!logChannelId) {
            return;
        }

        const logEmbed = this.createLogEmbed(interaction);
        await this.sendLog(logChannelId, interaction.guildId!, logEmbed);
    }

    public createLogEmbed(interaction: BaseInteraction): EmbedBuilder {
        const { user, guild, channel } = interaction;
        const description = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **${user.tag}** –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ.`;

        const embed = this._embedFactory.createInfoEmbed({
            title: "–õ–æ–≥: –ù–æ–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ",
            description: description,
            context: { user, guild },
        });

        const interactionData = this.buildInteractionData(interaction);
        this.addBasicFields(embed, interaction);
        this.addSpecificFields(embed, interaction, interactionData);
        this.addJsonField(embed, interactionData);

        return embed;
    }

    /**
     * @private
     * @method buildInteractionData
     * @description –°—Ç—Ä–æ–∏—Ç –±–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.
     */
    private buildInteractionData(
        interaction: BaseInteraction
    ): Record<string, any> {
        const { user, guild, channel } = interaction;

        return {
            id: interaction.id,
            type: InteractionType[interaction.type],
            user: {
                id: user.id,
                tag: user.tag,
                username: user.username,
            },
            guild: {
                id: guild?.id,
                name: guild?.name,
            },
            channel: {
                id: channel?.id,
                name: channel && "name" in channel ? channel.name : "Unknown",
                type: channel?.type,
            },
            createdTimestamp: interaction.createdTimestamp,
        };
    }

    /**
     * @private
     * @method addBasicFields
     * @description –î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –≤ embed.
     */
    private addBasicFields(
        embed: EmbedBuilder,
        interaction: BaseInteraction
    ): void {
        const { user, guild, channel } = interaction;

        embed.addFields(
            {
                name: "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                value: `**Tag:** ${user.tag}\n**ID:** \`${user.id}\``,
                inline: true,
            },
            {
                name: "–¢–∏–ø",
                value: `\`${InteractionType[interaction.type]}\``,
                inline: true,
            },
            {
                name: "üìç –ú–µ—Å—Ç–æ",
                value: `**–°–µ—Ä–≤–µ—Ä:** ${
                    guild?.name
                }\n**–ö–∞–Ω–∞–ª:** ${channel?.toString()}`,
                inline: false,
            }
        );
    }

    /**
     * @private
     * @method addSpecificFields
     * @description –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.
     */
    private addSpecificFields(
        embed: EmbedBuilder,
        interaction: BaseInteraction,
        interactionData: Record<string, any>
    ): void {
        if (interaction.isChatInputCommand()) {
            this.handleCommandInteraction(embed, interaction, interactionData);
        } else if (interaction.isButton()) {
            this.handleButtonInteraction(embed, interaction, interactionData);
        } else if (interaction.isModalSubmit()) {
            this.handleModalInteraction(embed, interaction, interactionData);
        } else if (interaction.isAnySelectMenu()) {
            this.handleSelectMenuInteraction(
                embed,
                interaction,
                interactionData
            );
        }
    }

    /**
     * @private
     * @method handleCommandInteraction
     * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥—ã.
     */
    private handleCommandInteraction(
        embed: EmbedBuilder,
        interaction: any,
        interactionData: Record<string, any>
    ): void {
        embed.setTitle("–õ–æ–≥: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã");
        embed.setDescription(
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **${interaction.user.tag}** –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É **/${interaction.commandName}**.`
        );

        interactionData.command = {
            name: interaction.commandName,
            id: interaction.commandId,
            options: interaction.options.data.map((option: any) => ({
                name: option.name,
                type: option.type,
                value: option.value,
            })),
        };
    }

    /**
     * @private
     * @method handleButtonInteraction
     * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∏.
     */
    private handleButtonInteraction(
        embed: EmbedBuilder,
        interaction: any,
        interactionData: Record<string, any>
    ): void {
        embed.setTitle("–õ–æ–≥: –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏");
        embed.setDescription(
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **${interaction.user.tag}** –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É.`
        );
        embed.addFields({
            name: "üîß –î–µ—Ç–∞–ª–∏ –∫–Ω–æ–ø–∫–∏",
            value: `**Custom ID:** \`${interaction.customId}\``,
            inline: false,
        });

        interactionData.button = {
            customId: interaction.customId,
            componentType: interaction.componentType,
        };
    }

    /**
     * @private
     * @method handleModalInteraction
     * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞.
     */
    private handleModalInteraction(
        embed: EmbedBuilder,
        interaction: any,
        interactionData: Record<string, any>
    ): void {
        embed.setTitle("–õ–æ–≥: –û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞");
        embed.setDescription(
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **${interaction.user.tag}** –æ—Ç–ø—Ä–∞–≤–∏–ª –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ.`
        );
        embed.addFields({
            name: "üîß –î–µ—Ç–∞–ª–∏ –æ–∫–Ω–∞",
            value: `**Custom ID:** \`${interaction.customId}\``,
            inline: false,
        });

        interactionData.modal = {
            customId: interaction.customId,
            fields: interaction.fields.fields.map((field: any) => ({
                customId: field.customId,
                value: field.value,
                type: field.type,
            })),
        };
    }

    /**
     * @private
     * @method handleSelectMenuInteraction
     * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ select –º–µ–Ω—é.
     */
    private handleSelectMenuInteraction(
        embed: EmbedBuilder,
        interaction: any,
        interactionData: Record<string, any>
    ): void {
        embed.setTitle("–õ–æ–≥: –í—ã–±–æ—Ä –≤ –º–µ–Ω—é");
        embed.setDescription(
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **${interaction.user.tag}** —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä –≤ –º–µ–Ω—é.`
        );
        embed.addFields({
            name: "üîß –î–µ—Ç–∞–ª–∏ –º–µ–Ω—é",
            value: `**Custom ID:** \`${
                interaction.customId
            }\`\n**–í—ã–±—Ä–∞–Ω–æ:** \`\`\`${interaction.values.join(", ")}\`\`\``,
            inline: false,
        });

        interactionData.selectMenu = {
            customId: interaction.customId,
            componentType: interaction.componentType,
            values: interaction.values,
        };
    }

    /**
     * @private
     * @method addJsonField
     * @description –î–æ–±–∞–≤–ª—è–µ—Ç JSON –ø–æ–ª–µ –≤ embed.
     */
    private addJsonField(
        embed: EmbedBuilder,
        interactionData: Record<string, any>
    ): void {
        const jsonString = JSON.stringify(interactionData, null, 4);
        embed.addFields({
            name: "üìã JSON –î–∞–Ω–Ω—ã–µ",
            value: `\`\`\`json\n${jsonString}\`\`\``,
            inline: false,
        });
    }
}
