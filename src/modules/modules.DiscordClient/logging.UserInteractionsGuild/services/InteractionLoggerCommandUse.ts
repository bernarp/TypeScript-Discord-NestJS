/**
 * @file InteractionLoggerService.ts
 * @description –°–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Ö.
 * –í–ï–†–°–ò–Ø 4.1: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –≤—ã–∑–æ–≤–æ–º –ª–æ–≥–≥–µ—Ä–∞.
 */
import { Inject, Injectable } from "@nestjs/common";
import { OnEvent } from "@nestjs/event-emitter";
import { InteractionCreateEvent } from "@event.EventBus/interaction-create.event";
import { IEmbedFactory } from "@interface/utils/IEmbedFactory";
import { IClient } from "@interface/IClient";
import { IConfig } from "@interface/IConfig";
import { ChannelType, EmbedBuilder } from "discord.js";
import { AppEvents } from "@/event.EventBus/app.events";
import { IInteractionLoggerChannel } from "../abstractions/IInteractionLoggerChannel";
import { IGuildConfig } from "@interface/IGuildConfig";

@Injectable()
export class InteractionLoggerCommandUse extends IInteractionLoggerChannel {
    /**
     * @constructor
     */
    constructor(
        @Inject("IEmbedFactory")
        protected readonly _embedFactory: IEmbedFactory,
        @Inject("IClient") protected readonly _client: IClient,
        @Inject("IGuildConfig") protected readonly _guildConfig: IGuildConfig,
        @Inject("IConfig") private readonly _config: IConfig
    ) {
        super(_embedFactory, _client, _guildConfig);
    }

    /**
     * @method onInteractionCreated
     * @description –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏–µ 'interaction.created'.
     * @param {InteractionCreateEvent} payload - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.
     */
    @OnEvent(AppEvents.INTERACTION_CREATED_COMMAND)
    async onInteractionCreated(payload: InteractionCreateEvent): Promise<void> {
        const { interaction } = payload;
        this._logToConsole(interaction);

        const logChannelId = this._config.get<string>("LOG_CHANNEL_ID");
        if (!logChannelId) {
            this._logger.warn(
                "LOG_CHANNEL_ID is not set. Skipping log message to Discord."
            );
            return;
        }

        const logEmbed = this._createLogEmbed(interaction);

        await this._sendLog(
            logChannelId,
            interaction.guild?.id ?? "DM",
            logEmbed
        );

        // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –≤—ã–∑—ã–≤–∞–≤—à–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É.
        // this._logger.log(this._sendLog);

        // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏.
        this._logger.debug(
            `Command usage log for /${interaction.commandName} has been sent to channel ${logChannelId}.`
        );
    }

    /**
     * @private
     * @method _createLogEmbed
     * @description –°–æ–∑–¥–∞–µ—Ç –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (embed) –¥–ª—è –ª–æ–≥–∞ –∫–æ–º–∞–Ω–¥—ã.
     * @param {InteractionCreateEvent["interaction"]} interaction - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ.
     * @returns {EmbedBuilder} –ì–æ—Ç–æ–≤—ã–π embed.
     */
    private _createLogEmbed(
        interaction: InteractionCreateEvent["interaction"]
    ): EmbedBuilder {
        const { user, channel, commandName, guild, commandId, channelId } =
            interaction;

        return this._embedFactory.createInfoEmbed({
            title: "–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã",
            description: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **${user.tag}** –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É **/${commandName}**.`,
            fields: [
                {
                    name: "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                    value: `**Tag:** ${user.tag}\n**ID:** \`${user.id}\``,
                    inline: true,
                },
                {
                    name: "üìç –ú–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞",
                    value: interaction.inGuild()
                        ? `**–°–µ—Ä–≤–µ—Ä:** ${
                              guild?.name
                          }\n**–ö–∞–Ω–∞–ª:** ${channel?.toString()}`
                        : "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                    inline: true,
                },
                {
                    name: "üîß –î–µ—Ç–∞–ª–∏ –∫–æ–º–∞–Ω–¥—ã",
                    value: `**ID –ö–æ–º–∞–Ω–¥—ã:** \`${commandId}\`\n**ID –ö–∞–Ω–∞–ª–∞:** \`${channelId}\``,
                    inline: false,
                },
            ],
            context: { user, guild },
        });
    }

    /**
     * @private
     * @method _logToConsole
     * @description –í—ã–Ω–æ—Å–∏—Ç –ª–æ–≥–∏–∫—É –∑–∞–ø–∏—Å–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã.
     * @param {InteractionCreateEvent["interaction"]} interaction - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ.
     */
    private _logToConsole(
        interaction: InteractionCreateEvent["interaction"]
    ): void {
        const { user, channel, commandName, guild, commandId, channelId } =
            interaction;

        const logContext = {
            command: {
                name: `/${commandName}`,
                id: commandId,
            },
            user: {
                tag: user.tag,
                id: user.id,
            },
            source: {
                type: interaction.inGuild() ? "Guild" : "DM",
                guild: interaction.inGuild()
                    ? { name: guild?.name, id: guild?.id }
                    : undefined,
                channel: {
                    type: ChannelType[channel?.type ?? 0],
                    id: channelId,
                },
            },
        };

        this._logger.log(`Command executed`, logContext);
    }
}
