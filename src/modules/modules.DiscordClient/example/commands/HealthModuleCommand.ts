/**
 * @file HealthModuleCommand.ts
 * @description –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–æ–¥—É–ª—è –∏ —Å–∏—Å—Ç–µ–º—ã.
 * –í–ï–†–°–ò–Ø 4.0: –£–ø—Ä–æ—â–µ–Ω–∞ –∑–∞ —Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ Exception Filter.
 */

import { Inject, Injectable } from "@nestjs/common";
import {
    CommandInteraction,
    SlashCommandBuilder,
    EmbedBuilder,
    Colors,
    EmbedField,
    User,
    Guild,
} from "discord.js";
import { Command } from "@decorators/command.decorator";
import { ICommand } from "@interface/ICommand";
import { ExampleService, HealthInfo } from "../services/ExampleService";
import {
    IEmbedFactory,
    CustomEmbedOptions,
} from "@interface/utils/IEmbedFactory";

@Command()
@Injectable()
export class HealthModuleCommand implements ICommand {
    public readonly data = new SlashCommandBuilder()
        .setName("health-module")
        .setDescription("–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –º–æ–¥—É–ª—è");

    public constructor(
        private readonly _exampleService: ExampleService,
        @Inject("IEmbedFactory") private readonly _embedFactory: IEmbedFactory
    ) {}

    /**
     * @method execute
     * @description –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ë–ª–æ–∫ try...catch –±—ã–ª —É–¥–∞–ª–µ–Ω. –í—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
     * —Ç–µ–ø–µ—Ä—å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É DiscordExceptionFilter.
     */
    public async execute(interaction: CommandInteraction): Promise<void> {
        await interaction.deferReply({ ephemeral: true });

        const healthInfo = await this._exampleService.getHealthInfo();
        const systemStatus = await this._exampleService.checkSystemStatus();

        const embed = this._buildHealthEmbed(
            healthInfo,
            systemStatus,
            interaction.user,
            interaction.guild // –ü–µ—Ä–µ–¥–∞–µ–º –≥–∏–ª—å–¥–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        );

        await interaction.editReply({ embeds: [embed] });
    }

    private _buildHealthEmbed(
        healthInfo: HealthInfo,
        systemStatus: { status: string; issues: string[] },
        user: User,
        guild: Guild | null
    ): EmbedBuilder {
        let color: number;
        let statusEmoji: string;

        switch (systemStatus.status) {
            case "healthy":
                color = Colors.Green;
                statusEmoji = "‚úÖ";
                break;
            case "warning":
                color = Colors.Yellow;
                statusEmoji = "‚ö†Ô∏è";
                break;
            case "critical":
            case "error":
                color = Colors.Red;
                statusEmoji = "üö®";
                break;
            default:
                color = Colors.Blue;
                statusEmoji = "‚ÑπÔ∏è";
        }

        const fields: EmbedField[] = [
            {
                name: "üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞",
                value: [
                    `**–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** ${healthInfo.system.platform}`,
                    `**Node.js:** ${healthInfo.system.nodeVersion}`,
                    `**PID:** ${healthInfo.system.pid}`,
                    `**–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** ${healthInfo.uptime}`,
                ].join("\n"),
                inline: true,
            },
            {
                name: "üíæ –ü–∞–º—è—Ç—å",
                value: [
                    `**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** ${healthInfo.memory.used}`,
                    `**–í—Å–µ–≥–æ:** ${healthInfo.memory.total}`,
                    this._getMemoryBar(healthInfo.memory.percentage),
                ].join("\n"),
                inline: true,
            },
            {
                name: "‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                value: [
                    `**CPU (user):** ${healthInfo.performance.cpuUsage.user.toFixed(
                        2
                    )}ms`,
                    `**CPU (system):** ${healthInfo.performance.cpuUsage.system.toFixed(
                        2
                    )}ms`,
                ].join("\n"),
                inline: false,
            },
        ];

        if (systemStatus.issues.length > 0) {
            fields.push({
                name: "üìã –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
                value: systemStatus.issues.slice(0, 5).join("\n"),
                inline: false,
            });
        }

        const embedOptions: CustomEmbedOptions = {
            title: `${statusEmoji} –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã`,
            description: `–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: **${systemStatus.status.toUpperCase()}**`,
            color: color,
            fields: fields,
            context: { user, guild }, // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        };

        return this._embedFactory.create(embedOptions);
    }

    private _getMemoryBar(percentage: number): string {
        const barLength = 10;
        const filledLength = Math.round((percentage / 100) * barLength);
        const emptyLength = barLength - filledLength;
        const bar =
            (percentage >= 90 ? "üü•" : percentage >= 70 ? "üü®" : "üü©").repeat(
                filledLength
            ) + "‚¨ú".repeat(emptyLength);
        return `${bar} ${percentage}%`;
    }
}
