/**
 * @file HealthModuleCommand.ts
 * @description –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–æ–¥—É–ª—è –∏ —Å–∏—Å—Ç–µ–º—ã.
 * –í–ï–†–°–ò–Ø 3.0: –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ create –≤ EmbedFactory —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.
 */

import { Inject, Injectable } from "@nestjs/common";
import {
    CommandInteraction,
    SlashCommandBuilder,
    EmbedBuilder,
    Colors,
    EmbedField,
    User,
    Guild,
} from "discord.js";
import { Command } from "@decorators/command.decorator";
import { ICommand } from "@interface/ICommand";
import { ExampleService, HealthInfo } from "../services/ExampleService";
import {
    IEmbedFactory,
    CustomEmbedOptions,
} from "@interface/utils/IEmbedFactory";

@Command()
@Injectable()
export class HealthModuleCommand implements ICommand {
    public readonly data = new SlashCommandBuilder()
        .setName("health-module")
        .setDescription("–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –º–æ–¥—É–ª—è");

    /**
     * @constructor
     * @param _exampleService - –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏—Å—Ç–µ–º–µ.
     * @param _embedFactory - –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–º–±–µ–¥–æ–≤.
     */
    public constructor(
        private readonly _exampleService: ExampleService,
        @Inject("IEmbedFactory") private readonly _embedFactory: IEmbedFactory
    ) {}

    public async execute(interaction: CommandInteraction): Promise<void> {
        try {
            await interaction.deferReply({ ephemeral: true });

            const healthInfo = await this._exampleService.getHealthInfo();
            const systemStatus = await this._exampleService.checkSystemStatus();

            const embed = this._buildHealthEmbed(
                healthInfo,
                systemStatus,
                interaction.user
            );

            await interaction.editReply({ embeds: [embed] });
        } catch (error) {
            // –¢–∞–∫–∂–µ –ø–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —ç–º–±–µ–¥ –æ—à–∏–±–∫–∏
            const errorEmbed = this._embedFactory.createErrorEmbed({
                description:
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã.",
                context: { user: interaction.user },
            });
            await interaction.editReply({ embeds: [errorEmbed] });
        }
    }

    /**
     * @private
     * @method _buildHealthEmbed
     * @description –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç EmbedFactory –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —ç–º–±–µ–¥–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.
     * @param {HealthInfo} healthInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã.
     * @param {{status: string, issues: string[]}} systemStatus - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã.
     * @param {User} user - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã–∑–≤–∞–≤—à–∏–π –∫–æ–º–∞–Ω–¥—É.
     * @param {(Guild | null)} guild - –ì–∏–ª—å–¥–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞.
     * @returns {EmbedBuilder} –ì–æ—Ç–æ–≤—ã–π —ç–º–±–µ–¥.
     */
    private _buildHealthEmbed(
        healthInfo: HealthInfo,
        systemStatus: { status: string; issues: string[] },
        user: User
    ): EmbedBuilder {
        let color: number;
        let statusEmoji: string;

        switch (systemStatus.status) {
            case "healthy":
                color = Colors.Green;
                statusEmoji = "‚úÖ";
                break;
            case "warning":
                color = Colors.Yellow;
                statusEmoji = "‚ö†Ô∏è";
                break;
            case "critical":
            case "error":
                color = Colors.Red;
                statusEmoji = "üö®";
                break;
            default:
                color = Colors.Blue;
                statusEmoji = "‚ÑπÔ∏è";
        }

        const fields: EmbedField[] = [
            {
                name: "üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞",
                value: [
                    `**–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** ${healthInfo.system.platform}`,
                    `**Node.js:** ${healthInfo.system.nodeVersion}`,
                    `**PID:** ${healthInfo.system.pid}`,
                    `**–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** ${healthInfo.uptime}`,
                ].join("\n"),
                inline: true,
            },
            {
                name: "üíæ –ü–∞–º—è—Ç—å",
                value: [
                    `**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** ${healthInfo.memory.used}`,
                    `**–í—Å–µ–≥–æ:** ${healthInfo.memory.total}`,
                    this._getMemoryBar(healthInfo.memory.percentage),
                ].join("\n"),
                inline: true,
            },
            {
                name: "‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                value: [
                    `**CPU (user):** ${healthInfo.performance.cpuUsage.user.toFixed(
                        2
                    )}ms`,
                    `**CPU (system):** ${healthInfo.performance.cpuUsage.system.toFixed(
                        2
                    )}ms`,
                ].join("\n"),
                inline: false,
            },
        ];

        if (systemStatus.issues.length > 0) {
            fields.push({
                name: "üìã –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
                value: systemStatus.issues.slice(0, 5).join("\n"),
                inline: false,
            });
        }

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ–ø—Ü–∏–π –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ç–º–±–µ–¥–∞
        const embedOptions: CustomEmbedOptions = {
            title: `${statusEmoji} –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã`,
            description: `–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: **${systemStatus.status.toUpperCase()}**`,
            color: color,
            fields: fields,
            context: { user }, 
        };

        return this._embedFactory.create(embedOptions);
    }

    /**
     * @private
     * @method _getMemoryBar
     * @description –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–æ–ª–æ—Å—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏.
     * @param {number} percentage - –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏.
     * @returns {string} –í–∏–∑—É–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞.
     */
    private _getMemoryBar(percentage: number): string {
        const barLength = 10;
        const filledLength = Math.round((percentage / 100) * barLength);
        const emptyLength = barLength - filledLength;
        const bar =
            (percentage >= 90 ? "üü•" : percentage >= 70 ? "üü®" : "üü©").repeat(
                filledLength
            ) + "‚¨ú".repeat(emptyLength);
        return `${bar} ${percentage}%`;
    }
}
