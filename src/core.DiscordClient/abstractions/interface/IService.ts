/**
 * @interface IService
 * @description Базовый интерфейс-маркер для всех сервисов в приложении.
 * Сервисы инкапсулируют бизнес-логику (например, работа с базой данных,
 * взаимодействие с внешними API, сложная обработка данных).
 * Использование этого интерфейса позволяет стандартизировать сервисный слой.
 *
 * @example
 * // Конкретный сервис должен реализовывать этот интерфейс
 * class UserService implements IService {
 *   // ... реализация
 * }
 */
export interface IService {
    /**
     * @method init
     * @description Опциональный метод для инициализации сервиса.
     * Может использоваться для асинхронной настройки, например, для установления
     * соединения с базой данных или кэширования начальных данных.
     * // TODO: Рассмотреть возможность сделать этот метод обязательным, если все сервисы требуют инициализации.
     * @returns {Promise<void> | void}
     */
    init?(): Promise<void> | void;

    /**
     * @method shutdown
     * @description Опциональный метод для корректного завершения работы сервиса.
     * Может использоваться для освобождения ресурсов, например, для закрытия
     * соединения с базой данных или сохранения данных в хранилище перед выключением.
     * @returns {Promise<void> | void}
     */
    shutdown?(): Promise<void> | void;
}
