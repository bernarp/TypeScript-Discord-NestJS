/**
 * @interface IConfig
 * @description Интерфейс для сервиса конфигурации ("КонфигМастер").
 * Предоставляет унифицированный доступ к переменным окружения и другим
 * конфигурационным параметрам приложения. Абстрагирует источник конфигурации
 * (это может быть .env файл, JSON, удаленный сервис и т.д.).
 */
export interface IConfig {
    /**
     * @method get
     * @description Получает значение конфигурации по ключу.
     * Использование дженерика <T> позволяет получать типизированные значения.
     * @template T - Ожидаемый тип возвращаемого значения.
     * @param {string} key - Ключ параметра конфигурации (например, 'DISCORD_TOKEN').
     * @param {T} [defaultValue] - Опциональное значение по умолчанию, которое будет возвращено, если ключ не найден.
     * @returns {T} Значение параметра конфигурации или defaultValue, если ключ не найден.
     */
    get<T>(key: string, defaultValue?: T): T;

    /**
     * @method has
     * @description Проверяет наличие ключа в конфигурации.
     * @param {string} key - Ключ для проверки.
     * @returns {boolean} true, если ключ существует, иначе false.
     */
    has(key: string): boolean;
}
