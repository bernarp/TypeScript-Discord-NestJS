/**
 * @file Service.ts
 * @description Содержит абстрактный базовый класс для всех сервисов.
 */

import { IService } from "@common/interfaces/IService";

/**
 * @abstract
 * @class Service
 * @description Базовый абстрактный класс, реализующий интерфейс IService.
 * Предоставляет пустую реализацию для опциональных методов жизненного цикла
 * `init` и `shutdown`, избавляя дочерние классы от необходимости реализовывать
 * их, если в этом нет нужды.
 * @implements {IService}
 */
export abstract class Service implements IService {
    /**
     * @public
     * @method init
     * @description Метод для инициализации сервиса. Дочерние классы могут
     * переопределить его для выполнения асинхронной настройки.
     * @returns {void}
     */
    public init(): void {
        // По умолчанию этот метод ничего не делает.
        // Переопределите его в дочернем классе, если требуется логика инициализации.
    }

    /**
     * @public
     * @method shutdown
     * @description Метод для корректного завершения работы сервиса. Дочерние классы
     * могут переопределить его для освобождения ресурсов.
     * @returns {void}
     */
    public shutdown(): void {
        // По умолчанию этот метод ничего не делает.
        // Переопределите его в дочернем классе, если требуется логика завершения работы.
    }
}
